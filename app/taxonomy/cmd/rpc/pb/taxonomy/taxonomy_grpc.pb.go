// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rpc/pb/taxonomy.proto

package taxonomy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaxonomiesClient is the client API for Taxonomies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaxonomiesClient interface {
	Get(ctx context.Context, in *ReqTaxonomyId, opts ...grpc.CallOption) (*Taxonomy, error)
	GetAll(ctx context.Context, in *ReqGetAll, opts ...grpc.CallOption) (*RespGetAll, error)
}

type taxonomiesClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxonomiesClient(cc grpc.ClientConnInterface) TaxonomiesClient {
	return &taxonomiesClient{cc}
}

func (c *taxonomiesClient) Get(ctx context.Context, in *ReqTaxonomyId, opts ...grpc.CallOption) (*Taxonomy, error) {
	out := new(Taxonomy)
	err := c.cc.Invoke(ctx, "/taxonomy.taxonomies/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomiesClient) GetAll(ctx context.Context, in *ReqGetAll, opts ...grpc.CallOption) (*RespGetAll, error) {
	out := new(RespGetAll)
	err := c.cc.Invoke(ctx, "/taxonomy.taxonomies/getAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxonomiesServer is the server API for Taxonomies service.
// All implementations must embed UnimplementedTaxonomiesServer
// for forward compatibility
type TaxonomiesServer interface {
	Get(context.Context, *ReqTaxonomyId) (*Taxonomy, error)
	GetAll(context.Context, *ReqGetAll) (*RespGetAll, error)
	mustEmbedUnimplementedTaxonomiesServer()
}

// UnimplementedTaxonomiesServer must be embedded to have forward compatible implementations.
type UnimplementedTaxonomiesServer struct {
}

func (UnimplementedTaxonomiesServer) Get(context.Context, *ReqTaxonomyId) (*Taxonomy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTaxonomiesServer) GetAll(context.Context, *ReqGetAll) (*RespGetAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTaxonomiesServer) mustEmbedUnimplementedTaxonomiesServer() {}

// UnsafeTaxonomiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxonomiesServer will
// result in compilation errors.
type UnsafeTaxonomiesServer interface {
	mustEmbedUnimplementedTaxonomiesServer()
}

func RegisterTaxonomiesServer(s grpc.ServiceRegistrar, srv TaxonomiesServer) {
	s.RegisterService(&Taxonomies_ServiceDesc, srv)
}

func _Taxonomies_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTaxonomyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomiesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxonomy.taxonomies/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomiesServer).Get(ctx, req.(*ReqTaxonomyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taxonomies_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomiesServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxonomy.taxonomies/getAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomiesServer).GetAll(ctx, req.(*ReqGetAll))
	}
	return interceptor(ctx, in, info, handler)
}

// Taxonomies_ServiceDesc is the grpc.ServiceDesc for Taxonomies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taxonomies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taxonomy.taxonomies",
	HandlerType: (*TaxonomiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _Taxonomies_Get_Handler,
		},
		{
			MethodName: "getAll",
			Handler:    _Taxonomies_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/taxonomy.proto",
}
