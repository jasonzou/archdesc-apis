// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taxonomyFieldNames          = builder.RawFieldNames(&Taxonomy{})
	taxonomyRows                = strings.Join(taxonomyFieldNames, ",")
	taxonomyRowsExpectAutoSet   = strings.Join(stringx.Remove(taxonomyFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	taxonomyRowsWithPlaceHolder = strings.Join(stringx.Remove(taxonomyFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheTaxonomyIdPrefix = "cache:taxonomy:id:"
)

type (
	taxonomyModel interface {
		Insert(ctx context.Context, data *Taxonomy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Taxonomy, error)
		Update(ctx context.Context, data *Taxonomy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTaxonomyModel struct {
		sqlc.CachedConn
		table string
	}

	Taxonomy struct {
		Id            int64          `db:"id"`
		Usage         sql.NullString `db:"usage"`
		ParentId      sql.NullInt64  `db:"parent_id"`
		SourceCulture string         `db:"source_culture"`
	}
)

func newTaxonomyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTaxonomyModel {
	return &defaultTaxonomyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`taxonomy`",
	}
}

func (m *defaultTaxonomyModel) Insert(ctx context.Context, data *Taxonomy) (sql.Result, error) {
	taxonomyIdKey := fmt.Sprintf("%s%v", cacheTaxonomyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, taxonomyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Usage, data.ParentId, data.SourceCulture)
	}, taxonomyIdKey)
	return ret, err
}

func (m *defaultTaxonomyModel) FindOne(ctx context.Context, id int64) (*Taxonomy, error) {
	taxonomyIdKey := fmt.Sprintf("%s%v", cacheTaxonomyIdPrefix, id)
	var resp Taxonomy
	err := m.QueryRowCtx(ctx, &resp, taxonomyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taxonomyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaxonomyModel) Update(ctx context.Context, data *Taxonomy) error {
	taxonomyIdKey := fmt.Sprintf("%s%v", cacheTaxonomyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taxonomyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Usage, data.ParentId, data.SourceCulture, data.Id)
	}, taxonomyIdKey)
	return err
}

func (m *defaultTaxonomyModel) Delete(ctx context.Context, id int64) error {
	taxonomyIdKey := fmt.Sprintf("%s%v", cacheTaxonomyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, taxonomyIdKey)
	return err
}

func (m *defaultTaxonomyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTaxonomyIdPrefix, primary)
}

func (m *defaultTaxonomyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taxonomyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaxonomyModel) tableName() string {
	return m.table
}
