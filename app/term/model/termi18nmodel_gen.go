// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	termI18nFieldNames          = builder.RawFieldNames(&TermI18n{})
	termI18nRows                = strings.Join(termI18nFieldNames, ",")
	termI18nRowsExpectAutoSet   = strings.Join(stringx.Remove(termI18nFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	termI18nRowsWithPlaceHolder = strings.Join(stringx.Remove(termI18nFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	termI18nModel interface {
		Insert(ctx context.Context, data *TermI18n) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TermI18n, error)
		Update(ctx context.Context, data *TermI18n) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTermI18nModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TermI18n struct {
		Name    sql.NullString `db:"name"`
		Id      int64          `db:"id"`
		Culture string         `db:"culture"`
	}
)

func newTermI18nModel(conn sqlx.SqlConn) *defaultTermI18nModel {
	return &defaultTermI18nModel{
		conn:  conn,
		table: "`term_i18n`",
	}
}

func (m *defaultTermI18nModel) Insert(ctx context.Context, data *TermI18n) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, termI18nRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Culture)
	return ret, err
}

func (m *defaultTermI18nModel) FindOne(ctx context.Context, id int64) (*TermI18n, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", termI18nRows, m.table)
	var resp TermI18n
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTermI18nModel) Update(ctx context.Context, data *TermI18n) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, termI18nRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Culture, data.Id)
	return err
}

func (m *defaultTermI18nModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTermI18nModel) tableName() string {
	return m.table
}
